// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Data class representing a comment.
///
/// This model is used to transfer comment data between Flutter and the
/// native platform implementations.
class CommentModel {
  CommentModel({
    required this.postId,
    required this.id,
    required this.name,
    required this.email,
    required this.body,
  });

  int postId;

  int id;

  String name;

  String email;

  String body;

  Object encode() {
    return <Object?>[
      postId,
      id,
      name,
      email,
      body,
    ];
  }

  static CommentModel decode(Object result) {
    result as List<Object?>;
    return CommentModel(
      postId: result[0]! as int,
      id: result[1]! as int,
      name: result[2]! as String,
      email: result[3]! as String,
      body: result[4]! as String,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is CommentModel) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return CommentModel.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Host API for fetching comments from the native side.
///
/// This interface defines methods that Flutter can call to communicate with
/// native platform code. The implementation of these methods will be handled
/// natively on iOS (Swift) and Android (Kotlin).
class CommentApi {
  /// Constructor for [CommentApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CommentApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Sets the base URL configuration for the API requests.
  ///
  /// This method should be implemented natively to store the given
  /// values (`scheme`, `authority`, and `port`), which will be used
  /// to construct API request URLs.
  ///
  /// - Parameters:
  ///   - [scheme]: The URL scheme (e.g., "http" or "https").
  ///   - [authority]: The host (e.g., "jsonplaceholder.typicode.com").
  ///   - [port]: The port number (e.g., 443 for HTTPS, 80 for HTTP).
  Future<void> setBaseUrl(String scheme, String authority, int port) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.comments_repository.CommentApi.setBaseUrl$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[scheme, authority, port]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Asynchronously fetches a list of [CommentModel] instances for a given
  /// post ID.
  ///
  /// This method is annotated with `@async`, which instructs Pigeon to generate
  /// an asynchronous API on the Flutter side. Instead of returning a direct
  /// result, the method will return a `Future<List<CommentModel>>`, allowing
  /// the caller to await the response asynchronously.
  ///
  /// ### Impact of `@async` on Native Implementations:
  /// - **Swift (iOS)**: The generated Swift method will use a completion
  ///   handler (`completion: @escaping (Result<[CommentModel], Error>)
  ///   -> Void`), meaning that the native implementation must execute the
  ///   network request asynchronously and invoke the completion handler once
  ///   the data is available.
  ///
  /// - **Kotlin (Android)**: The method signature will include a callback
  ///   parameter (`callback: (Result<List<CommentModel>>) -> Unit`), requiring
  ///   the native implementation to execute the network call in a coroutine
  ///   and return the result asynchronously.
  ///
  /// - **Flutter (Dart)**: The generated Dart method will return a
  ///   `Future<List<CommentModel>>`, ensuring that calls to `getComments()` do
  ///   not block the main UI thread.
  ///
  /// - Parameters:
  ///   - [postId]: The ID of the post whose comments should be retrieved.
  ///
  /// - Returns: A `Future<List<CommentModel>>` resolving to the list of
  ///   comments.
  Future<List<CommentModel>> getComments(int postId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.comments_repository.CommentApi.getComments$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[postId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<CommentModel>();
    }
  }
}
