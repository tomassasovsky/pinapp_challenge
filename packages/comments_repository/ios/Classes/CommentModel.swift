// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Data class representing a comment.
///
/// Generated class from Pigeon that represents data sent in messages.
struct CommentModel {
  var postId: Int64? = nil
  var id: Int64? = nil
  var name: String? = nil
  var email: String? = nil
  var body: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CommentModel? {
    let postId: Int64? = nilOrValue(pigeonVar_list[0])
    let id: Int64? = nilOrValue(pigeonVar_list[1])
    let name: String? = nilOrValue(pigeonVar_list[2])
    let email: String? = nilOrValue(pigeonVar_list[3])
    let body: String? = nilOrValue(pigeonVar_list[4])

    return CommentModel(
      postId: postId,
      id: id,
      name: name,
      email: email,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      postId,
      id,
      name,
      email,
      body,
    ]
  }
}

private class CommentModelPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return CommentModel.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class CommentModelPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CommentModel {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CommentModelPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CommentModelPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CommentModelPigeonCodecWriter(data: data)
  }
}

class CommentModelPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = CommentModelPigeonCodec(readerWriter: CommentModelPigeonCodecReaderWriter())
}

/// Host API for fetching comments from the native side.
///
/// This asynchronous method returns a list of [CommentModel] objects after
/// performing a REST API call natively.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CommentApi {
  /// Sets the base URL configuration.
  /// The native side should store these values and use them to construct the
  /// URL.
  func setBaseUrl(scheme: String, authority: String, port: Int64) throws
  /// Returns a list of [CommentModel] instances for the given postId.
  func getComments(postId: Int64) throws -> [CommentModel]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CommentApiSetup {
  static var codec: FlutterStandardMessageCodec { CommentModelPigeonCodec.shared }
  /// Sets up an instance of `CommentApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CommentApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Sets the base URL configuration.
    /// The native side should store these values and use them to construct the
    /// URL.
    let setBaseUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.comments_repository.CommentApi.setBaseUrl\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setBaseUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let schemeArg = args[0] as! String
        let authorityArg = args[1] as! String
        let portArg = args[2] as! Int64
        do {
          try api.setBaseUrl(scheme: schemeArg, authority: authorityArg, port: portArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setBaseUrlChannel.setMessageHandler(nil)
    }
    /// Returns a list of [CommentModel] instances for the given postId.
    let getCommentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.comments_repository.CommentApi.getComments\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCommentsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let postIdArg = args[0] as! Int64
        do {
          let result = try api.getComments(postId: postIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getCommentsChannel.setMessageHandler(nil)
    }
  }
}
