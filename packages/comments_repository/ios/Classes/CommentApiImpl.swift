import Foundation
import Flutter

/// Implementation of the CommentApi protocol generated by Pigeon.
///
/// This implementation stores a base URL configuration (scheme, authority, and port)
/// provided by the Dart side via `setBaseUrl(_:_:)` and then uses that configuration
/// to construct the URL for fetching comments for a specific post.
class CommentApiImpl: NSObject, CommentApi {
    
    // MARK: - Configuration Properties
    
    /// The URL scheme (e.g. "https").
    var scheme: String = "https"
    
    /// The URL authority/host (e.g. "jsonplaceholder.typicode.com").
    var authority: String = "jsonplaceholder.typicode.com"
    
    /// The URL port (e.g. 443). Typically 443 for HTTPS and 80 for HTTP.
    var port: Int = 443
    
    // MARK: - Pigeon API Methods
    
    /// Sets the base URL configuration.
    ///
    /// - Parameters:
    ///   - scheme: The URL scheme.
    ///   - authority: The host name.
    ///   - port: The port number, passed as an NSNumber.
    func setBaseUrl(scheme: String, authority: String, port: Int64) {
        self.scheme = scheme
        self.authority = authority
        self.port = Int(port)
    }

    /**
     Asynchronously fetches comments for a given post ID.

     This function performs a network request to retrieve a list of comments associated with the specified post.
     The network call is executed on a background thread to avoid blocking the main thread, and the result is delivered
     asynchronously via the provided completion handler.

     - Parameters:
        - postId: The ID of the post whose comments should be fetched.
        - completion: A closure that receives a `Result` containing either an array of `CommentModel` objects (on success)
                      or an `Error` (on failure).

     - Important:
       This function does not block the calling thread. The result is delivered asynchronously via the completion handler.

     - Example Usage:
       ```swift
       commentApi.getComments(postId: 1) { result in
           switch result {
           case .success(let comments):
               print("Fetched \(comments.count) comments successfully")
           case .failure(let error):
               print("Failed to fetch comments: \(error.localizedDescription)")
           }
       }
    */
     func getComments(postId: Int64, completion: @escaping (Result<[CommentModel], Error>) -> Void) {
        // Build the URL string using the stored configuration.
        let urlString: String = {
          if (scheme == "http" && port == 80) || (scheme == "https" && port == 443) {
            return "\(scheme)://\(authority)/comments?postId=\(postId)"
          } else {
            return "\(scheme)://\(authority):\(port)/comments?postId=\(postId)"
          }
        }()
        
        guard let url = URL(string: urlString) else {
          completion(.failure(NSError(
            domain: "CommentApiImpl",
            code: 0,
            userInfo: [NSLocalizedDescriptionKey: "Invalid URL: \(urlString)"]
          )))
          return
        }

        let task = URLSession.shared.dataTask(with: url) { data, response, error in
          if let error = error {
            completion(.failure(error))
            return
          }
          guard let data = data else {
            completion(.failure(NSError(
              domain: "CommentApiImpl",
              code: 0,
              userInfo: [NSLocalizedDescriptionKey: "No data received"]
            )))
            return
          }
          
          do {
            if let jsonArray = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] {
              var comments: [CommentModel] = []
              for dict in jsonArray {
                let postIdNumber = dict["postId"] as! NSNumber
                let idNumber = dict["id"] as! NSNumber
                let nameValue = dict["name"] as! String
                let emailValue = dict["email"] as! String
                let bodyValue = dict["body"] as! String
                
                let comment = CommentModel(
                  postId: postIdNumber.int64Value,
                  id: idNumber.int64Value,
                  name: nameValue,
                  email: emailValue,
                  body: bodyValue
                )
                comments.append(comment)
              }
              completion(.success(comments))
            } else {
              completion(.failure(NSError(
                domain: "CommentApiImpl",
                code: 0,
                userInfo: [NSLocalizedDescriptionKey: "Invalid JSON format"]
              )))
            }
          } catch {
            completion(.failure(error))
          }
        }
        task.resume()
    }
}
