// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * Data class representing a comment.
 *
 * This model is used to transfer comment data between Flutter and the
 * native platform implementations.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class CommentModel (
  val postId: Long,
  val id: Long,
  val name: String,
  val email: String,
  val body: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CommentModel {
      val postId = pigeonVar_list[0] as Long
      val id = pigeonVar_list[1] as Long
      val name = pigeonVar_list[2] as String
      val email = pigeonVar_list[3] as String
      val body = pigeonVar_list[4] as String
      return CommentModel(postId, id, name, email, body)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      postId,
      id,
      name,
      email,
      body,
    )
  }
}
private open class CommentModelPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CommentModel.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CommentModel -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Host API for fetching comments from the native side.
 *
 * This interface defines methods that Flutter can call to communicate with
 * native platform code. The implementation of these methods will be handled
 * natively on iOS (Swift) and Android (Kotlin).
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface CommentApi {
  /**
   * Sets the base URL configuration for the API requests.
   *
   * This method should be implemented natively to store the given
   * values (`scheme`, `authority`, and `port`), which will be used
   * to construct API request URLs.
   *
   * - Parameters:
   *   - [scheme]: The URL scheme (e.g., "http" or "https").
   *   - [authority]: The host (e.g., "jsonplaceholder.typicode.com").
   *   - [port]: The port number (e.g., 443 for HTTPS, 80 for HTTP).
   */
  fun setBaseUrl(scheme: String, authority: String, port: Long)
  /**
   * Asynchronously fetches a list of [CommentModel] instances for a given
   * post ID.
   *
   * This method is annotated with `@async`, which instructs Pigeon to generate
   * an asynchronous API on the Flutter side. Instead of returning a direct
   * result, the method will return a `Future<List<CommentModel>>`, allowing
   * the caller to await the response asynchronously.
   *
   * ### Impact of `@async` on Native Implementations:
   * - **Swift (iOS)**: The generated Swift method will use a completion
   *   handler (`completion: @escaping (Result<[CommentModel], Error>)
   *   -> Void`), meaning that the native implementation must execute the
   *   network request asynchronously and invoke the completion handler once
   *   the data is available.
   *
   * - **Kotlin (Android)**: The method signature will include a callback
   *   parameter (`callback: (Result<List<CommentModel>>) -> Unit`), requiring
   *   the native implementation to execute the network call in a coroutine
   *   and return the result asynchronously.
   *
   * - **Flutter (Dart)**: The generated Dart method will return a
   *   `Future<List<CommentModel>>`, ensuring that calls to `getComments()` do
   *   not block the main UI thread.
   *
   * - Parameters:
   *   - [postId]: The ID of the post whose comments should be retrieved.
   *
   * - Returns: A `Future<List<CommentModel>>` resolving to the list of
   *   comments.
   */
  fun getComments(postId: Long, callback: (Result<List<CommentModel>>) -> Unit)

  companion object {
    /** The codec used by CommentApi. */
    val codec: MessageCodec<Any?> by lazy {
      CommentModelPigeonCodec()
    }
    /** Sets up an instance of `CommentApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CommentApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.comments_repository.CommentApi.setBaseUrl$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val schemeArg = args[0] as String
            val authorityArg = args[1] as String
            val portArg = args[2] as Long
            val wrapped: List<Any?> = try {
              api.setBaseUrl(schemeArg, authorityArg, portArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.comments_repository.CommentApi.getComments$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val postIdArg = args[0] as Long
            api.getComments(postIdArg) { result: Result<List<CommentModel>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
